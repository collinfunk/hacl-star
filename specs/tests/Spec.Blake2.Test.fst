module Spec.Blake2.Test

open FStar.Mul
open Lib.IntTypes
open Lib.RawIntTypes
open Lib.Sequence
open Lib.ByteSequence
module PS = Lib.PrintSequence
module S = Spec.Blake2

#set-options "--z3rlimit 50 --fuel 0 --ifuel 0"

///  Test 1

let test1_plaintext : lbytes 3 =
  let l = List.Tot.map u8_from_UInt8 [ 0x61uy; 0x62uy; 0x63uy ] in
  assert_norm (List.Tot.length l = 3);
  of_list l


let test1_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x50uy; 0x8Cuy; 0x5Euy; 0x8Cuy; 0x32uy; 0x7Cuy; 0x14uy; 0xE2uy;
    0xE1uy; 0xA7uy; 0x2Buy; 0xA3uy; 0x4Euy; 0xEBuy; 0x45uy; 0x2Fuy;
    0x37uy; 0x45uy; 0x8Buy; 0x20uy; 0x9Euy; 0xD6uy; 0x3Auy; 0x29uy;
    0x4Duy; 0x99uy; 0x9Buy; 0x4Cuy; 0x86uy; 0x67uy; 0x59uy; 0x82uy ] in
  assert_norm (List.Tot.length l = 32);
  of_list l


let test2_plaintext : lbytes 1 =
  let l = List.Tot.map u8_from_UInt8 [ 0x00uy ] in
  assert_norm (List.Tot.length l = 1);
  of_list l


let test2_key : lbytes 32 =
  let l =  List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1auy; 0x1buy; 0x1cuy; 0x1duy; 0x1euy; 0x1fuy ] in
  assert_norm (List.Tot.length l = 32);
  of_list l


let test2_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x40uy; 0xd1uy; 0x5fuy; 0xeeuy; 0x7cuy; 0x32uy; 0x88uy; 0x30uy;
    0x16uy; 0x6auy; 0xc3uy; 0xf9uy; 0x18uy; 0x65uy; 0x0fuy; 0x80uy;
    0x7euy; 0x7euy; 0x01uy; 0xe1uy; 0x77uy; 0x25uy; 0x8cuy; 0xdcuy;
    0x0auy; 0x39uy; 0xb1uy; 0x1fuy; 0x59uy; 0x80uy; 0x66uy; 0xf1uy ] in
  assert_norm (List.Tot.length l = 32);
  of_list l


let test3_plaintext : lbytes 255 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1auy; 0x1buy; 0x1cuy; 0x1duy; 0x1euy; 0x1fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2auy; 0x2buy; 0x2cuy; 0x2duy; 0x2euy; 0x2fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3auy; 0x3buy; 0x3cuy; 0x3duy; 0x3euy; 0x3fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4auy; 0x4buy; 0x4cuy; 0x4duy; 0x4euy; 0x4fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5auy; 0x5buy; 0x5cuy; 0x5duy; 0x5euy; 0x5fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6auy; 0x6buy; 0x6cuy; 0x6duy; 0x6euy; 0x6fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7auy; 0x7buy; 0x7cuy; 0x7duy; 0x7euy; 0x7fuy;
    0x80uy; 0x81uy; 0x82uy; 0x83uy; 0x84uy; 0x85uy; 0x86uy; 0x87uy;
    0x88uy; 0x89uy; 0x8auy; 0x8buy; 0x8cuy; 0x8duy; 0x8euy; 0x8fuy;
    0x90uy; 0x91uy; 0x92uy; 0x93uy; 0x94uy; 0x95uy; 0x96uy; 0x97uy;
    0x98uy; 0x99uy; 0x9auy; 0x9buy; 0x9cuy; 0x9duy; 0x9euy; 0x9fuy;
    0xa0uy; 0xa1uy; 0xa2uy; 0xa3uy; 0xa4uy; 0xa5uy; 0xa6uy; 0xa7uy;
    0xa8uy; 0xa9uy; 0xaauy; 0xabuy; 0xacuy; 0xaduy; 0xaeuy; 0xafuy;
    0xb0uy; 0xb1uy; 0xb2uy; 0xb3uy; 0xb4uy; 0xb5uy; 0xb6uy; 0xb7uy;
    0xb8uy; 0xb9uy; 0xbauy; 0xbbuy; 0xbcuy; 0xbduy; 0xbeuy; 0xbfuy;
    0xc0uy; 0xc1uy; 0xc2uy; 0xc3uy; 0xc4uy; 0xc5uy; 0xc6uy; 0xc7uy;
    0xc8uy; 0xc9uy; 0xcauy; 0xcbuy; 0xccuy; 0xcduy; 0xceuy; 0xcfuy;
    0xd0uy; 0xd1uy; 0xd2uy; 0xd3uy; 0xd4uy; 0xd5uy; 0xd6uy; 0xd7uy;
    0xd8uy; 0xd9uy; 0xdauy; 0xdbuy; 0xdcuy; 0xdduy; 0xdeuy; 0xdfuy;
    0xe0uy; 0xe1uy; 0xe2uy; 0xe3uy; 0xe4uy; 0xe5uy; 0xe6uy; 0xe7uy;
    0xe8uy; 0xe9uy; 0xeauy; 0xebuy; 0xecuy; 0xeduy; 0xeeuy; 0xefuy;
    0xf0uy; 0xf1uy; 0xf2uy; 0xf3uy; 0xf4uy; 0xf5uy; 0xf6uy; 0xf7uy;
    0xf8uy; 0xf9uy; 0xfauy; 0xfbuy; 0xfcuy; 0xfduy; 0xfeuy ] in
  assert_norm (List.Tot.length l = 255);
  of_list l


let test3_key : lbytes 32 =
  let l =  List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1auy; 0x1buy; 0x1cuy; 0x1duy; 0x1euy; 0x1fuy ] in
  assert_norm (List.Tot.length l = 32);
  of_list l


let test3_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x3fuy; 0xb7uy; 0x35uy; 0x06uy; 0x1auy; 0xbcuy; 0x51uy; 0x9duy;
    0xfeuy; 0x97uy; 0x9euy; 0x54uy; 0xc1uy; 0xeeuy; 0x5buy; 0xfauy;
    0xd0uy; 0xa9uy; 0xd8uy; 0x58uy; 0xb3uy; 0x31uy; 0x5buy; 0xaduy;
    0x34uy; 0xbduy; 0xe9uy; 0x99uy; 0xefuy; 0xd7uy; 0x24uy; 0xdduy ] in
  assert_norm (List.Tot.length l = 32);
  of_list l


let test4_plaintext : lbytes 251 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1auy; 0x1buy; 0x1cuy; 0x1duy; 0x1euy; 0x1fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2auy; 0x2buy; 0x2cuy; 0x2duy; 0x2euy; 0x2fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3auy; 0x3buy; 0x3cuy; 0x3duy; 0x3euy; 0x3fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4auy; 0x4buy; 0x4cuy; 0x4duy; 0x4euy; 0x4fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5auy; 0x5buy; 0x5cuy; 0x5duy; 0x5euy; 0x5fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6auy; 0x6buy; 0x6cuy; 0x6duy; 0x6euy; 0x6fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7auy; 0x7buy; 0x7cuy; 0x7duy; 0x7euy; 0x7fuy;
    0x80uy; 0x81uy; 0x82uy; 0x83uy; 0x84uy; 0x85uy; 0x86uy; 0x87uy;
    0x88uy; 0x89uy; 0x8auy; 0x8buy; 0x8cuy; 0x8duy; 0x8euy; 0x8fuy;
    0x90uy; 0x91uy; 0x92uy; 0x93uy; 0x94uy; 0x95uy; 0x96uy; 0x97uy;
    0x98uy; 0x99uy; 0x9auy; 0x9buy; 0x9cuy; 0x9duy; 0x9euy; 0x9fuy;
    0xa0uy; 0xa1uy; 0xa2uy; 0xa3uy; 0xa4uy; 0xa5uy; 0xa6uy; 0xa7uy;
    0xa8uy; 0xa9uy; 0xaauy; 0xabuy; 0xacuy; 0xaduy; 0xaeuy; 0xafuy;
    0xb0uy; 0xb1uy; 0xb2uy; 0xb3uy; 0xb4uy; 0xb5uy; 0xb6uy; 0xb7uy;
    0xb8uy; 0xb9uy; 0xbauy; 0xbbuy; 0xbcuy; 0xbduy; 0xbeuy; 0xbfuy;
    0xc0uy; 0xc1uy; 0xc2uy; 0xc3uy; 0xc4uy; 0xc5uy; 0xc6uy; 0xc7uy;
    0xc8uy; 0xc9uy; 0xcauy; 0xcbuy; 0xccuy; 0xcduy; 0xceuy; 0xcfuy;
    0xd0uy; 0xd1uy; 0xd2uy; 0xd3uy; 0xd4uy; 0xd5uy; 0xd6uy; 0xd7uy;
    0xd8uy; 0xd9uy; 0xdauy; 0xdbuy; 0xdcuy; 0xdduy; 0xdeuy; 0xdfuy;
    0xe0uy; 0xe1uy; 0xe2uy; 0xe3uy; 0xe4uy; 0xe5uy; 0xe6uy; 0xe7uy;
    0xe8uy; 0xe9uy; 0xeauy; 0xebuy; 0xecuy; 0xeduy; 0xeeuy; 0xefuy;
    0xf0uy; 0xf1uy; 0xf2uy; 0xf3uy; 0xf4uy; 0xf5uy; 0xf6uy; 0xf7uy;
    0xf8uy; 0xf9uy; 0xfauy ] in
  assert_norm (List.Tot.length l = 251);
  of_list l


let test4_key : lbytes 32 =
  let l =  List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1auy; 0x1buy; 0x1cuy; 0x1duy; 0x1euy; 0x1fuy ] in
  assert_norm (List.Tot.length l = 32);
  of_list l


let test4_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0xd1uy; 0x2buy; 0xf3uy; 0x73uy; 0x2euy; 0xf4uy; 0xafuy; 0x5cuy;
    0x22uy; 0xfauy; 0x90uy; 0x35uy; 0x6auy; 0xf8uy; 0xfcuy; 0x50uy;
    0xfcuy; 0xb4uy; 0x0fuy; 0x8fuy; 0x2euy; 0xa5uy; 0xc8uy; 0x59uy;
    0x47uy; 0x37uy; 0xa3uy; 0xb3uy; 0xd5uy; 0xabuy; 0xdbuy; 0xd7uy ] in
  assert_norm (List.Tot.length l = 32);
  of_list l


///  Test 5 BLAKE 2B

let test5_plaintext : lbytes 3 =
  let l = List.Tot.map u8_from_UInt8 [ 0x61uy; 0x62uy; 0x63uy ] in
  assert_norm (List.Tot.length l = 3);
  of_list l


let test5_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0xBAuy; 0x80uy; 0xA5uy; 0x3Fuy; 0x98uy; 0x1Cuy; 0x4Duy; 0x0Duy;
    0x6Auy; 0x27uy; 0x97uy; 0xB6uy; 0x9Fuy; 0x12uy; 0xF6uy; 0xE9uy;
    0x4Cuy; 0x21uy; 0x2Fuy; 0x14uy; 0x68uy; 0x5Auy; 0xC4uy; 0xB7uy;
    0x4Buy; 0x12uy; 0xBBuy; 0x6Fuy; 0xDBuy; 0xFFuy; 0xA2uy; 0xD1uy;
    0x7Duy; 0x87uy; 0xC5uy; 0x39uy; 0x2Auy; 0xABuy; 0x79uy; 0x2Duy;
    0xC2uy; 0x52uy; 0xD5uy; 0xDEuy; 0x45uy; 0x33uy; 0xCCuy; 0x95uy;
    0x18uy; 0xD3uy; 0x8Auy; 0xA8uy; 0xDBuy; 0xF1uy; 0x92uy; 0x5Auy;
    0xB9uy; 0x23uy; 0x86uy; 0xEDuy; 0xD4uy; 0x00uy; 0x99uy; 0x23uy ] in
  assert_norm (List.Tot.length l = 64);
  of_list l


///  Test 6 BLAKE 2B

let test6_plaintext : lbytes 128 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l = 128);
  of_list l


let test6_key : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy ] in
  assert_norm (List.Tot.length l = 64);
  of_list l


let test6_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0xe4uy; 0x7buy; 0xb6uy; 0xf2uy; 0x0fuy; 0xbfuy; 0x14uy; 0x98uy;
    0x4fuy; 0x72uy; 0xa4uy; 0xc3uy; 0xcduy; 0x9fuy; 0x3duy; 0xc0uy;
    0xd3uy; 0x89uy; 0x28uy; 0xe5uy; 0x36uy; 0x73uy; 0x3buy; 0xa7uy;
    0xc5uy; 0xb1uy; 0x53uy; 0xc7uy; 0x15uy; 0x46uy; 0x58uy; 0x4buy;
    0x73uy; 0x71uy; 0xf9uy; 0xb7uy; 0x07uy; 0x07uy; 0x77uy; 0xb9uy;
    0xa0uy; 0x94uy; 0x77uy; 0x03uy; 0x40uy; 0x96uy; 0x50uy; 0xfduy;
    0x04uy; 0xcfuy; 0xc9uy; 0xa5uy; 0xd5uy; 0x61uy; 0xf9uy; 0x9euy;
    0xd1uy; 0x34uy; 0xefuy; 0x26uy; 0x2buy; 0x03uy; 0xdbuy; 0x94uy ] in
  assert_norm (List.Tot.length l = 64);
  of_list l


(*** Blake2s test vectors: *)

let test7_plaintext : lbytes 63 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy ] in
  assert_norm (FStar.List.length l = 63);
  of_list l


let test7_key : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test7_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0xC6uy; 0x53uy; 0x82uy; 0x51uy; 0x3Fuy; 0x07uy; 0x46uy; 0x0Duy;
    0xA3uy; 0x98uy; 0x33uy; 0xCBuy; 0x66uy; 0x6Cuy; 0x5Euy; 0xD8uy;
    0x2Euy; 0x61uy; 0xB9uy; 0xE9uy; 0x98uy; 0xF4uy; 0xB0uy; 0xC4uy;
    0x28uy; 0x7Cuy; 0xEEuy; 0x56uy; 0xC3uy; 0xCCuy; 0x9Buy; 0xCDuy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test8_plaintext : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test8_key : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test8_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x89uy; 0x75uy; 0xB0uy; 0x57uy; 0x7Fuy; 0xD3uy; 0x55uy; 0x66uy;
    0xD7uy; 0x50uy; 0xB3uy; 0x62uy; 0xB0uy; 0x89uy; 0x7Auy; 0x26uy;
    0xC3uy; 0x99uy; 0x13uy; 0x6Duy; 0xF0uy; 0x7Buy; 0xABuy; 0xABuy;
    0xBDuy; 0xE6uy; 0x20uy; 0x3Fuy; 0xF2uy; 0x95uy; 0x4Euy; 0xD4uy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test9_plaintext : lbytes 65 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy ] in
  assert_norm (FStar.List.length l = 65);
  of_list l


let test9_key : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test9_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x21uy; 0xFEuy; 0x0Cuy; 0xEBuy; 0x00uy; 0x52uy; 0xBEuy; 0x7Fuy;
    0xB0uy; 0xF0uy; 0x04uy; 0x18uy; 0x7Cuy; 0xACuy; 0xD7uy; 0xDEuy;
    0x67uy; 0xFAuy; 0x6Euy; 0xB0uy; 0x93uy; 0x8Duy; 0x92uy; 0x76uy;
    0x77uy; 0xF2uy; 0x39uy; 0x8Cuy; 0x13uy; 0x23uy; 0x17uy; 0xA8uy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test10_plaintext : lbytes 128 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4Auy; 0x4Buy; 0x4Cuy; 0x4Duy; 0x4Euy; 0x4Fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5Auy; 0x5Buy; 0x5Cuy; 0x5Duy; 0x5Euy; 0x5Fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6Auy; 0x6Buy; 0x6Cuy; 0x6Duy; 0x6Euy; 0x6Fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7Auy; 0x7Buy; 0x7Cuy; 0x7Duy; 0x7Euy; 0x7Fuy ] in
  assert_norm (FStar.List.length l = 128);
  of_list l


let test10_key : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test10_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x0Cuy; 0x31uy; 0x1Fuy; 0x38uy; 0xC3uy; 0x5Auy; 0x4Fuy; 0xB9uy;
    0x0Duy; 0x65uy; 0x1Cuy; 0x28uy; 0x9Duy; 0x48uy; 0x68uy; 0x56uy;
    0xCDuy; 0x14uy; 0x13uy; 0xDFuy; 0x9Buy; 0x06uy; 0x77uy; 0xF5uy;
    0x3Euy; 0xCEuy; 0x2Cuy; 0xD9uy; 0xE4uy; 0x77uy; 0xC6uy; 0x0Auy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test11_plaintext : lbytes 256 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4Auy; 0x4Buy; 0x4Cuy; 0x4Duy; 0x4Euy; 0x4Fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5Auy; 0x5Buy; 0x5Cuy; 0x5Duy; 0x5Euy; 0x5Fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6Auy; 0x6Buy; 0x6Cuy; 0x6Duy; 0x6Euy; 0x6Fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7Auy; 0x7Buy; 0x7Cuy; 0x7Duy; 0x7Euy; 0x7Fuy;
    0x80uy; 0x81uy; 0x82uy; 0x83uy; 0x84uy; 0x85uy; 0x86uy; 0x87uy;
    0x88uy; 0x89uy; 0x8Auy; 0x8Buy; 0x8Cuy; 0x8Duy; 0x8Euy; 0x8Fuy;
    0x90uy; 0x91uy; 0x92uy; 0x93uy; 0x94uy; 0x95uy; 0x96uy; 0x97uy;
    0x98uy; 0x99uy; 0x9Auy; 0x9Buy; 0x9Cuy; 0x9Duy; 0x9Euy; 0x9Fuy;
    0xA0uy; 0xA1uy; 0xA2uy; 0xA3uy; 0xA4uy; 0xA5uy; 0xA6uy; 0xA7uy;
    0xA8uy; 0xA9uy; 0xAAuy; 0xABuy; 0xACuy; 0xADuy; 0xAEuy; 0xAFuy;
    0xB0uy; 0xB1uy; 0xB2uy; 0xB3uy; 0xB4uy; 0xB5uy; 0xB6uy; 0xB7uy;
    0xB8uy; 0xB9uy; 0xBAuy; 0xBBuy; 0xBCuy; 0xBDuy; 0xBEuy; 0xBFuy;
    0xC0uy; 0xC1uy; 0xC2uy; 0xC3uy; 0xC4uy; 0xC5uy; 0xC6uy; 0xC7uy;
    0xC8uy; 0xC9uy; 0xCAuy; 0xCBuy; 0xCCuy; 0xCDuy; 0xCEuy; 0xCFuy;
    0xD0uy; 0xD1uy; 0xD2uy; 0xD3uy; 0xD4uy; 0xD5uy; 0xD6uy; 0xD7uy;
    0xD8uy; 0xD9uy; 0xDAuy; 0xDBuy; 0xDCuy; 0xDDuy; 0xDEuy; 0xDFuy;
    0xE0uy; 0xE1uy; 0xE2uy; 0xE3uy; 0xE4uy; 0xE5uy; 0xE6uy; 0xE7uy;
    0xE8uy; 0xE9uy; 0xEAuy; 0xEBuy; 0xECuy; 0xEDuy; 0xEEuy; 0xEFuy;
    0xF0uy; 0xF1uy; 0xF2uy; 0xF3uy; 0xF4uy; 0xF5uy; 0xF6uy; 0xF7uy;
    0xF8uy; 0xF9uy; 0xFAuy; 0xFBuy; 0xFCuy; 0xFDuy; 0xFEuy; 0xFFuy ] in
  assert_norm (FStar.List.length l = 256);
  of_list l


let test11_key : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l


let test11_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x52uy; 0x11uy; 0xD1uy; 0xAEuy; 0xFCuy; 0x00uy; 0x25uy; 0xBEuy;
    0x7Fuy; 0x85uy; 0xC0uy; 0x6Buy; 0x3Euy; 0x14uy; 0xE0uy; 0xFCuy;
    0x64uy; 0x5Auy; 0xE1uy; 0x2Buy; 0xD4uy; 0x17uy; 0x46uy; 0x48uy;
    0x5Euy; 0xA6uy; 0xD8uy; 0xA3uy; 0x64uy; 0xA2uy; 0xEAuy; 0xEEuy ] in
  assert_norm (FStar.List.length l = 32);
  of_list l

(*** Blake2b test vectors: *)

let test0_plaintext : lbytes 0 =
  let l = List.Tot.map u8_from_UInt8 [] in
  assert_norm (List.Tot.length l = 0);
  of_list l


let test0_key : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0auy; 0x0buy; 0x0cuy; 0x0duy; 0x0euy; 0x0fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1auy; 0x1buy; 0x1cuy; 0x1duy; 0x1euy; 0x1fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2auy; 0x2buy; 0x2cuy; 0x2duy; 0x2euy; 0x2fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3auy; 0x3buy; 0x3cuy; 0x3duy; 0x3euy; 0x3fuy ] in
  assert_norm (List.Tot.length l = 64);
  of_list l


let test0_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x10uy; 0xebuy; 0xb6uy; 0x77uy; 0x00uy; 0xb1uy; 0x86uy; 0x8euy;
    0xfbuy; 0x44uy; 0x17uy; 0x98uy; 0x7auy; 0xcfuy; 0x46uy; 0x90uy;
    0xaeuy; 0x9duy; 0x97uy; 0x2fuy; 0xb7uy; 0xa5uy; 0x90uy; 0xc2uy;
    0xf0uy; 0x28uy; 0x71uy; 0x79uy; 0x9auy; 0xaauy; 0x47uy; 0x86uy;
    0xb5uy; 0xe9uy; 0x96uy; 0xe8uy; 0xf0uy; 0xf4uy; 0xebuy; 0x98uy;
    0x1fuy; 0xc2uy; 0x14uy; 0xb0uy; 0x05uy; 0xf4uy; 0x2duy; 0x2fuy;
    0xf4uy; 0x23uy; 0x34uy; 0x99uy; 0x39uy; 0x16uy; 0x53uy; 0xdfuy;
    0x7auy; 0xefuy; 0xcbuy; 0xc1uy; 0x3fuy; 0xc5uy; 0x15uy; 0x68uy ] in
  assert_norm (List.Tot.length l = 64);
  of_list l


let test12_plaintext : lbytes 127 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4Auy; 0x4Buy; 0x4Cuy; 0x4Duy; 0x4Euy; 0x4Fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5Auy; 0x5Buy; 0x5Cuy; 0x5Duy; 0x5Euy; 0x5Fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6Auy; 0x6Buy; 0x6Cuy; 0x6Duy; 0x6Euy; 0x6Fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7Auy; 0x7Buy; 0x7Cuy; 0x7Duy; 0x7Euy ] in
  assert_norm (FStar.List.length l = 127);
  of_list l


let test12_key : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test12_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x76uy; 0xD2uy; 0xD8uy; 0x19uy; 0xC9uy; 0x2Buy; 0xCEuy; 0x55uy;
    0xFAuy; 0x8Euy; 0x09uy; 0x2Auy; 0xB1uy; 0xBFuy; 0x9Buy; 0x9Euy;
    0xABuy; 0x23uy; 0x7Auy; 0x25uy; 0x26uy; 0x79uy; 0x86uy; 0xCAuy;
    0xCFuy; 0x2Buy; 0x8Euy; 0xE1uy; 0x4Duy; 0x21uy; 0x4Duy; 0x73uy;
    0x0Duy; 0xC9uy; 0xA5uy; 0xAAuy; 0x2Duy; 0x7Buy; 0x59uy; 0x6Euy;
    0x86uy; 0xA1uy; 0xFDuy; 0x8Fuy; 0xA0uy; 0x80uy; 0x4Cuy; 0x77uy;
    0x40uy; 0x2Duy; 0x2Fuy; 0xCDuy; 0x45uy; 0x08uy; 0x36uy; 0x88uy;
    0xB2uy; 0x18uy; 0xB1uy; 0xCDuy; 0xFAuy; 0x0Duy; 0xCBuy; 0xCBuy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test13_plaintext : lbytes 128 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4Auy; 0x4Buy; 0x4Cuy; 0x4Duy; 0x4Euy; 0x4Fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5Auy; 0x5Buy; 0x5Cuy; 0x5Duy; 0x5Euy; 0x5Fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6Auy; 0x6Buy; 0x6Cuy; 0x6Duy; 0x6Euy; 0x6Fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7Auy; 0x7Buy; 0x7Cuy; 0x7Duy; 0x7Euy; 0x7Fuy ] in
  assert_norm (FStar.List.length l = 128);
  of_list l


let test13_key : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test13_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x72uy; 0x06uy; 0x5Euy; 0xE4uy; 0xDDuy; 0x91uy; 0xC2uy; 0xD8uy;
    0x50uy; 0x9Fuy; 0xA1uy; 0xFCuy; 0x28uy; 0xA3uy; 0x7Cuy; 0x7Fuy;
    0xC9uy; 0xFAuy; 0x7Duy; 0x5Buy; 0x3Fuy; 0x8Auy; 0xD3uy; 0xD0uy;
    0xD7uy; 0xA2uy; 0x56uy; 0x26uy; 0xB5uy; 0x7Buy; 0x1Buy; 0x44uy;
    0x78uy; 0x8Duy; 0x4Cuy; 0xAFuy; 0x80uy; 0x62uy; 0x90uy; 0x42uy;
    0x5Fuy; 0x98uy; 0x90uy; 0xA3uy; 0xA2uy; 0xA3uy; 0x5Auy; 0x90uy;
    0x5Auy; 0xB4uy; 0xB3uy; 0x7Auy; 0xCFuy; 0xD0uy; 0xDAuy; 0x6Euy;
    0x45uy; 0x17uy; 0xB2uy; 0x52uy; 0x5Cuy; 0x96uy; 0x51uy; 0xE4uy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test14_plaintext : lbytes 129 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4Auy; 0x4Buy; 0x4Cuy; 0x4Duy; 0x4Euy; 0x4Fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5Auy; 0x5Buy; 0x5Cuy; 0x5Duy; 0x5Euy; 0x5Fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6Auy; 0x6Buy; 0x6Cuy; 0x6Duy; 0x6Euy; 0x6Fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7Auy; 0x7Buy; 0x7Cuy; 0x7Duy; 0x7Euy; 0x7Fuy;
    0x80uy ] in
  assert_norm (FStar.List.length l = 129);
  of_list l


let test14_key : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test14_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x64uy; 0x47uy; 0x5Duy; 0xFEuy; 0x76uy; 0x00uy; 0xD7uy; 0x17uy;
    0x1Buy; 0xEAuy; 0x0Buy; 0x39uy; 0x4Euy; 0x27uy; 0xC9uy; 0xB0uy;
    0x0Duy; 0x8Euy; 0x74uy; 0xDDuy; 0x1Euy; 0x41uy; 0x6Auy; 0x79uy;
    0x47uy; 0x36uy; 0x82uy; 0xADuy; 0x3Duy; 0xFDuy; 0xBBuy; 0x70uy;
    0x66uy; 0x31uy; 0x55uy; 0x80uy; 0x55uy; 0xCFuy; 0xC8uy; 0xA4uy;
    0x0Euy; 0x07uy; 0xBDuy; 0x01uy; 0x5Auy; 0x45uy; 0x40uy; 0xDCuy;
    0xDEuy; 0xA1uy; 0x58uy; 0x83uy; 0xCBuy; 0xBFuy; 0x31uy; 0x41uy;
    0x2Duy; 0xF1uy; 0xDEuy; 0x1Cuy; 0xD4uy; 0x15uy; 0x2Buy; 0x91uy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test15_plaintext : lbytes 256 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4Auy; 0x4Buy; 0x4Cuy; 0x4Duy; 0x4Euy; 0x4Fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5Auy; 0x5Buy; 0x5Cuy; 0x5Duy; 0x5Euy; 0x5Fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6Auy; 0x6Buy; 0x6Cuy; 0x6Duy; 0x6Euy; 0x6Fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7Auy; 0x7Buy; 0x7Cuy; 0x7Duy; 0x7Euy; 0x7Fuy;
    0x80uy; 0x81uy; 0x82uy; 0x83uy; 0x84uy; 0x85uy; 0x86uy; 0x87uy;
    0x88uy; 0x89uy; 0x8Auy; 0x8Buy; 0x8Cuy; 0x8Duy; 0x8Euy; 0x8Fuy;
    0x90uy; 0x91uy; 0x92uy; 0x93uy; 0x94uy; 0x95uy; 0x96uy; 0x97uy;
    0x98uy; 0x99uy; 0x9Auy; 0x9Buy; 0x9Cuy; 0x9Duy; 0x9Euy; 0x9Fuy;
    0xA0uy; 0xA1uy; 0xA2uy; 0xA3uy; 0xA4uy; 0xA5uy; 0xA6uy; 0xA7uy;
    0xA8uy; 0xA9uy; 0xAAuy; 0xABuy; 0xACuy; 0xADuy; 0xAEuy; 0xAFuy;
    0xB0uy; 0xB1uy; 0xB2uy; 0xB3uy; 0xB4uy; 0xB5uy; 0xB6uy; 0xB7uy;
    0xB8uy; 0xB9uy; 0xBAuy; 0xBBuy; 0xBCuy; 0xBDuy; 0xBEuy; 0xBFuy;
    0xC0uy; 0xC1uy; 0xC2uy; 0xC3uy; 0xC4uy; 0xC5uy; 0xC6uy; 0xC7uy;
    0xC8uy; 0xC9uy; 0xCAuy; 0xCBuy; 0xCCuy; 0xCDuy; 0xCEuy; 0xCFuy;
    0xD0uy; 0xD1uy; 0xD2uy; 0xD3uy; 0xD4uy; 0xD5uy; 0xD6uy; 0xD7uy;
    0xD8uy; 0xD9uy; 0xDAuy; 0xDBuy; 0xDCuy; 0xDDuy; 0xDEuy; 0xDFuy;
    0xE0uy; 0xE1uy; 0xE2uy; 0xE3uy; 0xE4uy; 0xE5uy; 0xE6uy; 0xE7uy;
    0xE8uy; 0xE9uy; 0xEAuy; 0xEBuy; 0xECuy; 0xEDuy; 0xEEuy; 0xEFuy;
    0xF0uy; 0xF1uy; 0xF2uy; 0xF3uy; 0xF4uy; 0xF5uy; 0xF6uy; 0xF7uy;
    0xF8uy; 0xF9uy; 0xFAuy; 0xFBuy; 0xFCuy; 0xFDuy; 0xFEuy; 0xFFuy ] in
  assert_norm (FStar.List.length l = 256);
  of_list l


let test15_key : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test15_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0xB7uy; 0x20uy; 0x71uy; 0xE0uy; 0x96uy; 0x27uy; 0x7Euy; 0xDEuy;
    0xBBuy; 0x8Euy; 0xE5uy; 0x13uy; 0x4Duy; 0xD3uy; 0x71uy; 0x49uy;
    0x96uy; 0x30uy; 0x7Buy; 0xA3uy; 0xA5uy; 0x5Auy; 0xA4uy; 0x73uy;
    0x3Duy; 0x41uy; 0x2Auy; 0xBBuy; 0xE2uy; 0x8Euy; 0x90uy; 0x9Euy;
    0x10uy; 0xE5uy; 0x7Euy; 0x6Fuy; 0xBFuy; 0xB4uy; 0xEFuy; 0x53uy;
    0xB3uy; 0xB9uy; 0x60uy; 0x51uy; 0x82uy; 0x94uy; 0xFFuy; 0x88uy;
    0x9Auy; 0x90uy; 0x82uy; 0x92uy; 0x54uy; 0x41uy; 0x2Euy; 0x2Auy;
    0x60uy; 0xB8uy; 0x5Auy; 0xDDuy; 0x07uy; 0xA3uy; 0x67uy; 0x4Fuy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test16_plaintext : lbytes 512 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4Auy; 0x4Buy; 0x4Cuy; 0x4Duy; 0x4Euy; 0x4Fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5Auy; 0x5Buy; 0x5Cuy; 0x5Duy; 0x5Euy; 0x5Fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6Auy; 0x6Buy; 0x6Cuy; 0x6Duy; 0x6Euy; 0x6Fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7Auy; 0x7Buy; 0x7Cuy; 0x7Duy; 0x7Euy; 0x7Fuy;
    0x80uy; 0x81uy; 0x82uy; 0x83uy; 0x84uy; 0x85uy; 0x86uy; 0x87uy;
    0x88uy; 0x89uy; 0x8Auy; 0x8Buy; 0x8Cuy; 0x8Duy; 0x8Euy; 0x8Fuy;
    0x90uy; 0x91uy; 0x92uy; 0x93uy; 0x94uy; 0x95uy; 0x96uy; 0x97uy;
    0x98uy; 0x99uy; 0x9Auy; 0x9Buy; 0x9Cuy; 0x9Duy; 0x9Euy; 0x9Fuy;
    0xA0uy; 0xA1uy; 0xA2uy; 0xA3uy; 0xA4uy; 0xA5uy; 0xA6uy; 0xA7uy;
    0xA8uy; 0xA9uy; 0xAAuy; 0xABuy; 0xACuy; 0xADuy; 0xAEuy; 0xAFuy;
    0xB0uy; 0xB1uy; 0xB2uy; 0xB3uy; 0xB4uy; 0xB5uy; 0xB6uy; 0xB7uy;
    0xB8uy; 0xB9uy; 0xBAuy; 0xBBuy; 0xBCuy; 0xBDuy; 0xBEuy; 0xBFuy;
    0xC0uy; 0xC1uy; 0xC2uy; 0xC3uy; 0xC4uy; 0xC5uy; 0xC6uy; 0xC7uy;
    0xC8uy; 0xC9uy; 0xCAuy; 0xCBuy; 0xCCuy; 0xCDuy; 0xCEuy; 0xCFuy;
    0xD0uy; 0xD1uy; 0xD2uy; 0xD3uy; 0xD4uy; 0xD5uy; 0xD6uy; 0xD7uy;
    0xD8uy; 0xD9uy; 0xDAuy; 0xDBuy; 0xDCuy; 0xDDuy; 0xDEuy; 0xDFuy;
    0xE0uy; 0xE1uy; 0xE2uy; 0xE3uy; 0xE4uy; 0xE5uy; 0xE6uy; 0xE7uy;
    0xE8uy; 0xE9uy; 0xEAuy; 0xEBuy; 0xECuy; 0xEDuy; 0xEEuy; 0xEFuy;
    0xF0uy; 0xF1uy; 0xF2uy; 0xF3uy; 0xF4uy; 0xF5uy; 0xF6uy; 0xF7uy;
    0xF8uy; 0xF9uy; 0xFAuy; 0xFBuy; 0xFCuy; 0xFDuy; 0xFEuy; 0xFFuy;
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy;
    0x40uy; 0x41uy; 0x42uy; 0x43uy; 0x44uy; 0x45uy; 0x46uy; 0x47uy;
    0x48uy; 0x49uy; 0x4Auy; 0x4Buy; 0x4Cuy; 0x4Duy; 0x4Euy; 0x4Fuy;
    0x50uy; 0x51uy; 0x52uy; 0x53uy; 0x54uy; 0x55uy; 0x56uy; 0x57uy;
    0x58uy; 0x59uy; 0x5Auy; 0x5Buy; 0x5Cuy; 0x5Duy; 0x5Euy; 0x5Fuy;
    0x60uy; 0x61uy; 0x62uy; 0x63uy; 0x64uy; 0x65uy; 0x66uy; 0x67uy;
    0x68uy; 0x69uy; 0x6Auy; 0x6Buy; 0x6Cuy; 0x6Duy; 0x6Euy; 0x6Fuy;
    0x70uy; 0x71uy; 0x72uy; 0x73uy; 0x74uy; 0x75uy; 0x76uy; 0x77uy;
    0x78uy; 0x79uy; 0x7Auy; 0x7Buy; 0x7Cuy; 0x7Duy; 0x7Euy; 0x7Fuy;
    0x80uy; 0x81uy; 0x82uy; 0x83uy; 0x84uy; 0x85uy; 0x86uy; 0x87uy;
    0x88uy; 0x89uy; 0x8Auy; 0x8Buy; 0x8Cuy; 0x8Duy; 0x8Euy; 0x8Fuy;
    0x90uy; 0x91uy; 0x92uy; 0x93uy; 0x94uy; 0x95uy; 0x96uy; 0x97uy;
    0x98uy; 0x99uy; 0x9Auy; 0x9Buy; 0x9Cuy; 0x9Duy; 0x9Euy; 0x9Fuy;
    0xA0uy; 0xA1uy; 0xA2uy; 0xA3uy; 0xA4uy; 0xA5uy; 0xA6uy; 0xA7uy;
    0xA8uy; 0xA9uy; 0xAAuy; 0xABuy; 0xACuy; 0xADuy; 0xAEuy; 0xAFuy;
    0xB0uy; 0xB1uy; 0xB2uy; 0xB3uy; 0xB4uy; 0xB5uy; 0xB6uy; 0xB7uy;
    0xB8uy; 0xB9uy; 0xBAuy; 0xBBuy; 0xBCuy; 0xBDuy; 0xBEuy; 0xBFuy;
    0xC0uy; 0xC1uy; 0xC2uy; 0xC3uy; 0xC4uy; 0xC5uy; 0xC6uy; 0xC7uy;
    0xC8uy; 0xC9uy; 0xCAuy; 0xCBuy; 0xCCuy; 0xCDuy; 0xCEuy; 0xCFuy;
    0xD0uy; 0xD1uy; 0xD2uy; 0xD3uy; 0xD4uy; 0xD5uy; 0xD6uy; 0xD7uy;
    0xD8uy; 0xD9uy; 0xDAuy; 0xDBuy; 0xDCuy; 0xDDuy; 0xDEuy; 0xDFuy;
    0xE0uy; 0xE1uy; 0xE2uy; 0xE3uy; 0xE4uy; 0xE5uy; 0xE6uy; 0xE7uy;
    0xE8uy; 0xE9uy; 0xEAuy; 0xEBuy; 0xECuy; 0xEDuy; 0xEEuy; 0xEFuy;
    0xF0uy; 0xF1uy; 0xF2uy; 0xF3uy; 0xF4uy; 0xF5uy; 0xF6uy; 0xF7uy;
    0xF8uy; 0xF9uy; 0xFAuy; 0xFBuy; 0xFCuy; 0xFDuy; 0xFEuy; 0xFFuy ] in
  assert_norm (FStar.List.length l = 512);
  of_list l


let test16_key : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x00uy; 0x01uy; 0x02uy; 0x03uy; 0x04uy; 0x05uy; 0x06uy; 0x07uy;
    0x08uy; 0x09uy; 0x0Auy; 0x0Buy; 0x0Cuy; 0x0Duy; 0x0Euy; 0x0Fuy;
    0x10uy; 0x11uy; 0x12uy; 0x13uy; 0x14uy; 0x15uy; 0x16uy; 0x17uy;
    0x18uy; 0x19uy; 0x1Auy; 0x1Buy; 0x1Cuy; 0x1Duy; 0x1Euy; 0x1Fuy;
    0x20uy; 0x21uy; 0x22uy; 0x23uy; 0x24uy; 0x25uy; 0x26uy; 0x27uy;
    0x28uy; 0x29uy; 0x2Auy; 0x2Buy; 0x2Cuy; 0x2Duy; 0x2Euy; 0x2Fuy;
    0x30uy; 0x31uy; 0x32uy; 0x33uy; 0x34uy; 0x35uy; 0x36uy; 0x37uy;
    0x38uy; 0x39uy; 0x3Auy; 0x3Buy; 0x3Cuy; 0x3Duy; 0x3Euy; 0x3Fuy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test16_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x31uy; 0x95uy; 0x24uy; 0x78uy; 0xE1uy; 0xB6uy; 0x22uy; 0x9Buy;
    0x6Buy; 0xCAuy; 0x29uy; 0x6Cuy; 0x64uy; 0x3Auy; 0x3Fuy; 0xDBuy;
    0xE4uy; 0xAAuy; 0x2Cuy; 0x2Fuy; 0x7Fuy; 0xEAuy; 0x46uy; 0x66uy;
    0x75uy; 0x45uy; 0x3Duy; 0x5Fuy; 0x7Fuy; 0x09uy; 0x42uy; 0x70uy;
    0x21uy; 0xA7uy; 0x7Buy; 0x86uy; 0x25uy; 0xC7uy; 0x80uy; 0x70uy;
    0xC0uy; 0xF7uy; 0xCEuy; 0x56uy; 0x4Duy; 0x8Duy; 0x25uy; 0x7Duy;
    0x7Euy; 0xB3uy; 0x64uy; 0x95uy; 0xBEuy; 0x76uy; 0x95uy; 0x0Cuy;
    0x31uy; 0xA1uy; 0xA7uy; 0xD8uy; 0x0Fuy; 0xF8uy; 0xB1uy; 0xB4uy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l

(* Parameters are not present in the Blake2 RFC, instead, they are specified in the Blake2 paper.
   Hence, there are no official test vectors corresponding to them. The tests below aim to
   cover the different possible parameters, and the results were generated using the Blake2
   implementation in Python 3's hashlib *)

let test17_params : S.blake2_params S.Blake2S =
  { S.blake2_default_params S.Blake2S with fanout = u8 5; node_depth = u8 3 }

let test17_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0xA7uy; 0x4Euy; 0xDBuy; 0x2Duy; 0x8Fuy; 0xBBuy; 0x84uy; 0xFBuy;
    0x83uy; 0xEDuy; 0x64uy; 0x06uy; 0x82uy; 0x28uy; 0x7Cuy; 0x92uy;
    0x6Auy; 0xF5uy; 0xC3uy; 0x04uy; 0x09uy; 0xD1uy; 0xA8uy; 0xD4uy;
    0x66uy; 0x2Duy; 0x4Fuy; 0x34uy; 0xEBuy; 0xC4uy; 0xA0uy; 0x7Fuy
  ] in
  assert_norm (List.Tot.length l = 32);
  of_list l

let test18_params : S.blake2_params S.Blake2S =
  { S.blake2_default_params S.Blake2S with leaf_length = u32 43; depth = u8 4; inner_length = u8 9 }

let test18_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x68uy; 0x1Auy; 0xDCuy; 0x05uy; 0x69uy; 0xD8uy; 0xE9uy; 0x1Buy;
    0x36uy; 0xDFuy; 0x5Fuy; 0x1Duy; 0x85uy; 0x64uy; 0x42uy; 0x2Fuy;
    0x4Duy; 0x79uy; 0xD7uy; 0x31uy; 0xCBuy; 0x7Duy; 0xBCuy; 0xB7uy;
    0xC8uy; 0xEBuy; 0xB4uy; 0x80uy; 0xA6uy; 0xCEuy; 0x3Buy; 0x91uy
  ] in
  assert_norm (List.Tot.length l = 32);
  of_list l

let test19_params : S.blake2_params S.Blake2S =
  let s = create 8 (u8_from_UInt8 0x11uy) in
  { S.blake2_default_params S.Blake2S with salt = s; personal = s }

let test19_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0xD3uy; 0x93uy; 0xA6uy; 0xDEuy; 0xB6uy; 0xE3uy; 0x98uy; 0xB3uy;
    0x46uy; 0x11uy; 0xF0uy; 0x82uy; 0xCBuy; 0x2Fuy; 0xC0uy; 0x2Buy;
    0x5Cuy; 0xE1uy; 0x3Buy; 0xF7uy; 0x0Cuy; 0x64uy; 0x70uy; 0xD2uy;
    0x64uy; 0x1Fuy; 0x3Auy; 0xD1uy; 0x48uy; 0x93uy; 0xF5uy; 0x8Buy
  ] in
  assert_norm (List.Tot.length l = 32);
  of_list l

let test20_params : S.blake2_params S.Blake2B =
  { S.blake2_default_params S.Blake2B with fanout = u8 5; node_depth = u8 3; node_offset = u64 41 }

let test20_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x89uy; 0xDCuy; 0x86uy; 0xACuy; 0x37uy; 0xB1uy; 0xA4uy; 0x03uy;
    0xC2uy; 0xA3uy; 0xABuy; 0xC8uy; 0x26uy; 0x6Euy; 0x8Auy; 0x34uy;
    0xEFuy; 0x37uy; 0xD4uy; 0xF3uy; 0xABuy; 0xB7uy; 0xB6uy; 0x51uy;
    0x34uy; 0x55uy; 0x86uy; 0x68uy; 0xCCuy; 0xA8uy; 0x72uy; 0x8Auy;
    0xA7uy; 0x79uy; 0x52uy; 0x11uy; 0x22uy; 0x84uy; 0x37uy; 0xADuy;
    0x45uy; 0x0Buy; 0x96uy; 0xABuy; 0x2Auy; 0x95uy; 0x8Fuy; 0xD2uy;
    0x00uy; 0x68uy; 0xFCuy; 0x2Cuy; 0x84uy; 0x2Auy; 0xC9uy; 0x37uy;
    0x5Duy; 0x19uy; 0xF2uy; 0xF2uy; 0xADuy; 0xCDuy; 0x2Euy; 0x35uy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l


let test21_params : S.blake2_params S.Blake2B =
  { S.blake2_default_params S.Blake2B with leaf_length = u32 43; depth = u8 4; inner_length = u8 9 }

let test21_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x38uy; 0xF8uy; 0x64uy; 0xEFuy; 0xFDuy; 0x75uy; 0x6Cuy; 0xBFuy;
    0x38uy; 0xCEuy; 0xABuy; 0x1Euy; 0x7Fuy; 0x4Euy; 0x93uy; 0x97uy;
    0x98uy; 0x26uy; 0xA2uy; 0x8Euy; 0xABuy; 0x2Buy; 0xDBuy; 0xF7uy;
    0x9Euy; 0x0Euy; 0x79uy; 0x9Auy; 0xFFuy; 0xF3uy; 0x0Euy; 0xB2uy;
    0x59uy; 0xE3uy; 0x60uy; 0xB1uy; 0xC0uy; 0x2Euy; 0xEBuy; 0x79uy;
    0xFDuy; 0x5Euy; 0x10uy; 0x57uy; 0xC8uy; 0x5Euy; 0x80uy; 0x89uy;
    0x1Fuy; 0x60uy; 0x8Euy; 0xB2uy; 0x19uy; 0xFAuy; 0x32uy; 0x6Buy;
    0xA4uy; 0xFFuy; 0xE4uy; 0x52uy; 0x9Fuy; 0x69uy; 0x49uy; 0x43uy ] in
  assert_norm (FStar.List.length l = 64);
  of_list l

let test22_params : S.blake2_params S.Blake2B =
  let s = create 16 (u8_from_UInt8 0x11uy) in
  { S.blake2_default_params S.Blake2B with salt = s; personal = s }

let test22_expected : lbytes 64 =
  let l = List.Tot.map u8_from_UInt8 [
    0x84uy; 0x9Buy; 0xB0uy; 0x75uy; 0x73uy; 0x9Fuy; 0xADuy; 0xAAuy;
    0x6Auy; 0xB0uy; 0x25uy; 0xE2uy; 0xA7uy; 0xE2uy; 0x04uy; 0x57uy;
    0xBFuy; 0x0Euy; 0x73uy; 0xEDuy; 0x82uy; 0x22uy; 0x69uy; 0x70uy;
    0xB9uy; 0xF5uy; 0xBCuy; 0xB4uy; 0xA5uy; 0xE8uy; 0xA7uy; 0x49uy;
    0x3Auy; 0xD2uy; 0xA4uy; 0x25uy; 0xA8uy; 0x12uy; 0x1Cuy; 0xBDuy;
    0x75uy; 0x18uy; 0xB2uy; 0x08uy; 0x0Buy; 0xF6uy; 0xD2uy; 0xA4uy;
    0x2Euy; 0x44uy; 0x55uy; 0xA0uy; 0x4Cuy; 0xCEuy; 0x80uy; 0xE4uy;
    0xD4uy; 0xDCuy; 0x83uy; 0x6Euy; 0x04uy; 0xA3uy; 0x79uy; 0xD2uy
    ] in
  assert_norm (FStar.List.length l = 64);
  of_list l

let test23_params : S.blake2_params S.Blake2S =
  assert_norm (204217247359946 <= pow2 48 - 1);
  { S.blake2_default_params S.Blake2S with fanout = u8 23; node_depth = u8 9; node_offset = u64 204217247359946 }

let test23_expected : lbytes 32 =
  let l = List.Tot.map u8_from_UInt8 [
    0x6duy; 0xe5uy; 0x66uy; 0xb3uy; 0x79uy; 0x19uy; 0xa9uy; 0x30uy;
    0x36uy; 0xc9uy; 0xa7uy; 0x6duy; 0x7fuy; 0x93uy; 0x8fuy; 0xdduy;
    0xb8uy; 0xdauy; 0x24uy; 0x2auy; 0x80uy; 0x47uy; 0xbfuy; 0x94uy;
    0x34uy; 0x38uy; 0x2cuy; 0xccuy; 0xa2uy; 0xbauy; 0x0auy; 0xb0uy
    ] in
  assert_norm (FStar.List.length l = 32);
  of_list l

let emp_key : lbytes 0 =
  let l = List.Tot.map u8_from_UInt8 [] in
  assert_norm (List.Tot.length l == 0);
  of_list l

let blake2_length (a:S.alg) =
  allow_inversion S.alg;
  match a with
  | S.Blake2B -> 64
  | S.Blake2S -> 32

noeq type vec =
  | Vec :
    a:S.alg
    -> num:nat
    -> params: S.blake2_params a
    -> plain:bytes{length plain <= max_size_t}
    -> key:bytes{length key <= blake2_length a}
    -> hash:bytes{length hash = blake2_length a} -> vec

let test_vectors : list vec = [
  Vec S.Blake2S 1 (S.blake2_default_params _) test1_plaintext emp_key test1_expected;
  Vec S.Blake2S 2 (S.blake2_default_params _) test2_plaintext test2_key test2_expected;
  Vec S.Blake2S 3 (S.blake2_default_params _) test3_plaintext test3_key test3_expected;
  Vec S.Blake2S 4 (S.blake2_default_params _) test4_plaintext test4_key test4_expected;
  Vec S.Blake2S 7 (S.blake2_default_params _) test7_plaintext test7_key test7_expected;
  Vec S.Blake2S 8 (S.blake2_default_params _) test8_plaintext test8_key test8_expected;
  Vec S.Blake2S 9 (S.blake2_default_params _) test9_plaintext test9_key test9_expected;
  Vec S.Blake2S 10 (S.blake2_default_params _) test10_plaintext test10_key test10_expected;
  Vec S.Blake2S 11 (S.blake2_default_params _) test11_plaintext test11_key test11_expected;
  Vec S.Blake2S 17 test17_params test1_plaintext emp_key test17_expected;
  Vec S.Blake2S 18 test18_params test2_plaintext test2_key test18_expected;
  Vec S.Blake2S 19 test19_params test2_plaintext emp_key test19_expected;
  Vec S.Blake2S 23 test23_params test2_plaintext emp_key test23_expected;

  Vec S.Blake2B 0 (S.blake2_default_params _) test0_plaintext test0_key test0_expected;
  Vec S.Blake2B 5 (S.blake2_default_params _) test5_plaintext emp_key test5_expected;
  Vec S.Blake2B 6 (S.blake2_default_params _) test6_plaintext test6_key test6_expected;
  Vec S.Blake2B 12 (S.blake2_default_params _) test12_plaintext test12_key test12_expected;
  Vec S.Blake2B 13 (S.blake2_default_params _) test13_plaintext test13_key test13_expected;
  Vec S.Blake2B 14 (S.blake2_default_params _) test14_plaintext test14_key test14_expected;
  Vec S.Blake2B 15 (S.blake2_default_params _) test15_plaintext test15_key test15_expected;
  Vec S.Blake2B 16 (S.blake2_default_params _) test16_plaintext test16_key test16_expected;
  Vec S.Blake2B 20 test20_params test2_plaintext emp_key test20_expected;
  Vec S.Blake2B 21 test21_params test1_plaintext test13_key test21_expected;
  Vec S.Blake2B 22 test22_params test1_plaintext test13_key test22_expected;
]

#set-options "--ifuel 2"

let test_one (v:vec) =
  let Vec a num params plain key tag = v in
  let expected = tag in
  let computed =
    match a with
    | S.Blake2S -> S.blake2s plain params (Seq.length key) key 32
    | S.Blake2B -> S.blake2b plain params (Seq.length key) key 64 in

  IO.print_string ("\n\nTEST Blake2 "^(string_of_int num)^":");
  PS.print_compare true (length expected) expected computed


let test () =
  let res = List.for_all test_one test_vectors in
  if res then begin IO.print_string "\n\nAll tests successful !\n"; true end
  else begin IO.print_string "\n\nSome test failed !\n"; false end
